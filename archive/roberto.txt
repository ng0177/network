import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from numpy import sqrt
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

   
# -----------------------------------------------------------------------
# Neural Network Model  -------------------------------------------------

###
n_features = train_x.shape[1]
inputs  = keras.Input(shape=(n_features,))
dense   = layers.Dense(64, activation="relu")
x       = dense(inputs)
x       = layers.Dense(64, activation="relu")(x)
x       = layers.Dense(16, activation="relu")(x)
outputs = layers.Dense(2)(x)
model = keras.Model(inputs=inputs, outputs=outputs)
###
model.summary()

model.compile(optimizer='adam', loss='mse')

# fit the model
history = model.fit(train_x, train_y, batch_size=64, epochs=5, validation_data=(validation_x, validation_y))

# evaluate the model
error = model.evaluate(validation_x, validation_y, verbose=0)
print('MSE: %.5f, RMSE: %.5f' % (error, sqrt(error)))

res = model.predict(test_x)

# Reconstruct output variables
if normalization == 1:
 
	res1 = res[:,0] * std_train[-b]   + mean_train[-b]
	res2 = res[:,1] * std_train[-b+1] + mean_train[-b+1]

